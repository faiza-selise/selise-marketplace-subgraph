// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class CancelMarketItem extends ethereum.Event {
  get params(): CancelMarketItem__Params {
    return new CancelMarketItem__Params(this);
  }
}

export class CancelMarketItem__Params {
  _event: CancelMarketItem;

  constructor(event: CancelMarketItem) {
    this._event = event;
  }

  get initiator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get itemId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get marketEvent(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get item(): CancelMarketItemItemStruct {
    return changetype<CancelMarketItemItemStruct>(
      this._event.parameters[3].value.toTuple()
    );
  }
}

export class CancelMarketItemItemStruct extends ethereum.Tuple {
  get itemId(): BigInt {
    return this[0].toBigInt();
  }

  get nftContract(): Address {
    return this[1].toAddress();
  }

  get tokenId(): BigInt {
    return this[2].toBigInt();
  }

  get seller(): Address {
    return this[3].toAddress();
  }

  get owner(): Address {
    return this[4].toAddress();
  }

  get price(): BigInt {
    return this[5].toBigInt();
  }

  get forSale(): boolean {
    return this[6].toBoolean();
  }

  get startingTime(): BigInt {
    return this[7].toBigInt();
  }
}

export class ListMarketItem extends ethereum.Event {
  get params(): ListMarketItem__Params {
    return new ListMarketItem__Params(this);
  }
}

export class ListMarketItem__Params {
  _event: ListMarketItem;

  constructor(event: ListMarketItem) {
    this._event = event;
  }

  get initiator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get itemId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get marketEvent(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get item(): ListMarketItemItemStruct {
    return changetype<ListMarketItemItemStruct>(
      this._event.parameters[3].value.toTuple()
    );
  }
}

export class ListMarketItemItemStruct extends ethereum.Tuple {
  get itemId(): BigInt {
    return this[0].toBigInt();
  }

  get nftContract(): Address {
    return this[1].toAddress();
  }

  get tokenId(): BigInt {
    return this[2].toBigInt();
  }

  get seller(): Address {
    return this[3].toAddress();
  }

  get owner(): Address {
    return this[4].toAddress();
  }

  get price(): BigInt {
    return this[5].toBigInt();
  }

  get forSale(): boolean {
    return this[6].toBoolean();
  }

  get startingTime(): BigInt {
    return this[7].toBigInt();
  }
}

export class ListMultipleMarketItems extends ethereum.Event {
  get params(): ListMultipleMarketItems__Params {
    return new ListMultipleMarketItems__Params(this);
  }
}

export class ListMultipleMarketItems__Params {
  _event: ListMultipleMarketItems;

  constructor(event: ListMultipleMarketItems) {
    this._event = event;
  }

  get initiator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get nftContract(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get marketEvent(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get tokenIds(): Array<BigInt> {
    return this._event.parameters[3].value.toBigIntArray();
  }
}

export class MarketSale extends ethereum.Event {
  get params(): MarketSale__Params {
    return new MarketSale__Params(this);
  }
}

export class MarketSale__Params {
  _event: MarketSale;

  constructor(event: MarketSale) {
    this._event = event;
  }

  get initiator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get itemId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get marketEvent(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get marketItem(): MarketSaleMarketItemStruct {
    return changetype<MarketSaleMarketItemStruct>(
      this._event.parameters[3].value.toTuple()
    );
  }
}

export class MarketSaleMarketItemStruct extends ethereum.Tuple {
  get itemId(): BigInt {
    return this[0].toBigInt();
  }

  get nftContract(): Address {
    return this[1].toAddress();
  }

  get tokenId(): BigInt {
    return this[2].toBigInt();
  }

  get seller(): Address {
    return this[3].toAddress();
  }

  get owner(): Address {
    return this[4].toAddress();
  }

  get price(): BigInt {
    return this[5].toBigInt();
  }

  get forSale(): boolean {
    return this[6].toBoolean();
  }

  get startingTime(): BigInt {
    return this[7].toBigInt();
  }
}

export class MarketplaceCommissionTransaction extends ethereum.Event {
  get params(): MarketplaceCommissionTransaction__Params {
    return new MarketplaceCommissionTransaction__Params(this);
  }
}

export class MarketplaceCommissionTransaction__Params {
  _event: MarketplaceCommissionTransaction;

  constructor(event: MarketplaceCommissionTransaction) {
    this._event = event;
  }

  get initiator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get itemId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get marketEvent(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get platformFee(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class UpdateMarketItem extends ethereum.Event {
  get params(): UpdateMarketItem__Params {
    return new UpdateMarketItem__Params(this);
  }
}

export class UpdateMarketItem__Params {
  _event: UpdateMarketItem;

  constructor(event: UpdateMarketItem) {
    this._event = event;
  }

  get initiator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get itemId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get marketEvent(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get item(): UpdateMarketItemItemStruct {
    return changetype<UpdateMarketItemItemStruct>(
      this._event.parameters[3].value.toTuple()
    );
  }
}

export class UpdateMarketItemItemStruct extends ethereum.Tuple {
  get itemId(): BigInt {
    return this[0].toBigInt();
  }

  get nftContract(): Address {
    return this[1].toAddress();
  }

  get tokenId(): BigInt {
    return this[2].toBigInt();
  }

  get seller(): Address {
    return this[3].toAddress();
  }

  get owner(): Address {
    return this[4].toAddress();
  }

  get price(): BigInt {
    return this[5].toBigInt();
  }

  get forSale(): boolean {
    return this[6].toBoolean();
  }

  get startingTime(): BigInt {
    return this[7].toBigInt();
  }
}

export class UpdatePlatformFee extends ethereum.Event {
  get params(): UpdatePlatformFee__Params {
    return new UpdatePlatformFee__Params(this);
  }
}

export class UpdatePlatformFee__Params {
  _event: UpdatePlatformFee;

  constructor(event: UpdatePlatformFee) {
    this._event = event;
  }

  get platformFee(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class UpdatePlatformFeeRecipient extends ethereum.Event {
  get params(): UpdatePlatformFeeRecipient__Params {
    return new UpdatePlatformFeeRecipient__Params(this);
  }
}

export class UpdatePlatformFeeRecipient__Params {
  _event: UpdatePlatformFeeRecipient;

  constructor(event: UpdatePlatformFeeRecipient) {
    this._event = event;
  }

  get platformFeeRecipient1(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get platformFeeRecipient2(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Marketplace__fetchItemsListedResultValue0Struct extends ethereum.Tuple {
  get itemId(): BigInt {
    return this[0].toBigInt();
  }

  get nftContract(): Address {
    return this[1].toAddress();
  }

  get tokenId(): BigInt {
    return this[2].toBigInt();
  }

  get seller(): Address {
    return this[3].toAddress();
  }

  get owner(): Address {
    return this[4].toAddress();
  }

  get price(): BigInt {
    return this[5].toBigInt();
  }

  get forSale(): boolean {
    return this[6].toBoolean();
  }

  get startingTime(): BigInt {
    return this[7].toBigInt();
  }
}

export class Marketplace__fetchMarketItemsResultValue0Struct extends ethereum.Tuple {
  get itemId(): BigInt {
    return this[0].toBigInt();
  }

  get nftContract(): Address {
    return this[1].toAddress();
  }

  get tokenId(): BigInt {
    return this[2].toBigInt();
  }

  get seller(): Address {
    return this[3].toAddress();
  }

  get owner(): Address {
    return this[4].toAddress();
  }

  get price(): BigInt {
    return this[5].toBigInt();
  }

  get forSale(): boolean {
    return this[6].toBoolean();
  }

  get startingTime(): BigInt {
    return this[7].toBigInt();
  }
}

export class Marketplace__fetchMyNFTsResultValue0Struct extends ethereum.Tuple {
  get itemId(): BigInt {
    return this[0].toBigInt();
  }

  get nftContract(): Address {
    return this[1].toAddress();
  }

  get tokenId(): BigInt {
    return this[2].toBigInt();
  }

  get seller(): Address {
    return this[3].toAddress();
  }

  get owner(): Address {
    return this[4].toAddress();
  }

  get price(): BigInt {
    return this[5].toBigInt();
  }

  get forSale(): boolean {
    return this[6].toBoolean();
  }

  get startingTime(): BigInt {
    return this[7].toBigInt();
  }
}

export class Marketplace__getMarketItemResultValue0Struct extends ethereum.Tuple {
  get itemId(): BigInt {
    return this[0].toBigInt();
  }

  get nftContract(): Address {
    return this[1].toAddress();
  }

  get tokenId(): BigInt {
    return this[2].toBigInt();
  }

  get seller(): Address {
    return this[3].toAddress();
  }

  get owner(): Address {
    return this[4].toAddress();
  }

  get price(): BigInt {
    return this[5].toBigInt();
  }

  get forSale(): boolean {
    return this[6].toBoolean();
  }

  get startingTime(): BigInt {
    return this[7].toBigInt();
  }
}

export class Marketplace__idToMarketItemResult {
  value0: BigInt;
  value1: Address;
  value2: BigInt;
  value3: Address;
  value4: Address;
  value5: BigInt;
  value6: boolean;
  value7: BigInt;

  constructor(
    value0: BigInt,
    value1: Address,
    value2: BigInt,
    value3: Address,
    value4: Address,
    value5: BigInt,
    value6: boolean,
    value7: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromBoolean(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    return map;
  }

  getItemId(): BigInt {
    return this.value0;
  }

  getNftContract(): Address {
    return this.value1;
  }

  getTokenId(): BigInt {
    return this.value2;
  }

  getSeller(): Address {
    return this.value3;
  }

  getOwner(): Address {
    return this.value4;
  }

  getPrice(): BigInt {
    return this.value5;
  }

  getForSale(): boolean {
    return this.value6;
  }

  getStartingTime(): BigInt {
    return this.value7;
  }
}

export class Marketplace__listingsResult {
  value0: BigInt;
  value1: Address;
  value2: BigInt;
  value3: Address;
  value4: Address;
  value5: BigInt;
  value6: boolean;
  value7: BigInt;

  constructor(
    value0: BigInt,
    value1: Address,
    value2: BigInt,
    value3: Address,
    value4: Address,
    value5: BigInt,
    value6: boolean,
    value7: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromBoolean(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    return map;
  }

  getItemId(): BigInt {
    return this.value0;
  }

  getNftContract(): Address {
    return this.value1;
  }

  getTokenId(): BigInt {
    return this.value2;
  }

  getSeller(): Address {
    return this.value3;
  }

  getOwner(): Address {
    return this.value4;
  }

  getPrice(): BigInt {
    return this.value5;
  }

  getForSale(): boolean {
    return this.value6;
  }

  getStartingTime(): BigInt {
    return this.value7;
  }
}

export class Marketplace__platformFeeRecipientsResult {
  value0: Address;
  value1: i32;

  constructor(value0: Address, value1: i32) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set(
      "value1",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value1))
    );
    return map;
  }

  getPlatformFeeRecipient(): Address {
    return this.value0;
  }

  getFeePercent(): i32 {
    return this.value1;
  }
}

export class Marketplace extends ethereum.SmartContract {
  static bind(address: Address): Marketplace {
    return new Marketplace("Marketplace", address);
  }

  fetchItemsListed(): Array<Marketplace__fetchItemsListedResultValue0Struct> {
    let result = super.call(
      "fetchItemsListed",
      "fetchItemsListed():((uint256,address,uint256,address,address,uint256,bool,uint256)[])",
      []
    );

    return result[0].toTupleArray<
      Marketplace__fetchItemsListedResultValue0Struct
    >();
  }

  try_fetchItemsListed(): ethereum.CallResult<
    Array<Marketplace__fetchItemsListedResultValue0Struct>
  > {
    let result = super.tryCall(
      "fetchItemsListed",
      "fetchItemsListed():((uint256,address,uint256,address,address,uint256,bool,uint256)[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<Marketplace__fetchItemsListedResultValue0Struct>()
    );
  }

  fetchMarketItems(): Array<Marketplace__fetchMarketItemsResultValue0Struct> {
    let result = super.call(
      "fetchMarketItems",
      "fetchMarketItems():((uint256,address,uint256,address,address,uint256,bool,uint256)[])",
      []
    );

    return result[0].toTupleArray<
      Marketplace__fetchMarketItemsResultValue0Struct
    >();
  }

  try_fetchMarketItems(): ethereum.CallResult<
    Array<Marketplace__fetchMarketItemsResultValue0Struct>
  > {
    let result = super.tryCall(
      "fetchMarketItems",
      "fetchMarketItems():((uint256,address,uint256,address,address,uint256,bool,uint256)[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<Marketplace__fetchMarketItemsResultValue0Struct>()
    );
  }

  fetchMyNFTs(): Array<Marketplace__fetchMyNFTsResultValue0Struct> {
    let result = super.call(
      "fetchMyNFTs",
      "fetchMyNFTs():((uint256,address,uint256,address,address,uint256,bool,uint256)[])",
      []
    );

    return result[0].toTupleArray<Marketplace__fetchMyNFTsResultValue0Struct>();
  }

  try_fetchMyNFTs(): ethereum.CallResult<
    Array<Marketplace__fetchMyNFTsResultValue0Struct>
  > {
    let result = super.tryCall(
      "fetchMyNFTs",
      "fetchMyNFTs():((uint256,address,uint256,address,address,uint256,bool,uint256)[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<Marketplace__fetchMyNFTsResultValue0Struct>()
    );
  }

  getMarketItem(itemId: BigInt): Marketplace__getMarketItemResultValue0Struct {
    let result = super.call(
      "getMarketItem",
      "getMarketItem(uint256):((uint256,address,uint256,address,address,uint256,bool,uint256))",
      [ethereum.Value.fromUnsignedBigInt(itemId)]
    );

    return changetype<Marketplace__getMarketItemResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getMarketItem(
    itemId: BigInt
  ): ethereum.CallResult<Marketplace__getMarketItemResultValue0Struct> {
    let result = super.tryCall(
      "getMarketItem",
      "getMarketItem(uint256):((uint256,address,uint256,address,address,uint256,bool,uint256))",
      [ethereum.Value.fromUnsignedBigInt(itemId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Marketplace__getMarketItemResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  idToMarketItem(param0: BigInt): Marketplace__idToMarketItemResult {
    let result = super.call(
      "idToMarketItem",
      "idToMarketItem(uint256):(uint256,address,uint256,address,address,uint256,bool,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Marketplace__idToMarketItemResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toAddress(),
      result[4].toAddress(),
      result[5].toBigInt(),
      result[6].toBoolean(),
      result[7].toBigInt()
    );
  }

  try_idToMarketItem(
    param0: BigInt
  ): ethereum.CallResult<Marketplace__idToMarketItemResult> {
    let result = super.tryCall(
      "idToMarketItem",
      "idToMarketItem(uint256):(uint256,address,uint256,address,address,uint256,bool,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Marketplace__idToMarketItemResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toAddress(),
        value[4].toAddress(),
        value[5].toBigInt(),
        value[6].toBoolean(),
        value[7].toBigInt()
      )
    );
  }

  listings(
    param0: Address,
    param1: BigInt,
    param2: Address
  ): Marketplace__listingsResult {
    let result = super.call(
      "listings",
      "listings(address,uint256,address):(uint256,address,uint256,address,address,uint256,bool,uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
        ethereum.Value.fromAddress(param2)
      ]
    );

    return new Marketplace__listingsResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toAddress(),
      result[4].toAddress(),
      result[5].toBigInt(),
      result[6].toBoolean(),
      result[7].toBigInt()
    );
  }

  try_listings(
    param0: Address,
    param1: BigInt,
    param2: Address
  ): ethereum.CallResult<Marketplace__listingsResult> {
    let result = super.tryCall(
      "listings",
      "listings(address,uint256,address):(uint256,address,uint256,address,address,uint256,bool,uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
        ethereum.Value.fromAddress(param2)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Marketplace__listingsResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toAddress(),
        value[4].toAddress(),
        value[5].toBigInt(),
        value[6].toBoolean(),
        value[7].toBigInt()
      )
    );
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  platformFee(): i32 {
    let result = super.call("platformFee", "platformFee():(uint16)", []);

    return result[0].toI32();
  }

  try_platformFee(): ethereum.CallResult<i32> {
    let result = super.tryCall("platformFee", "platformFee():(uint16)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  platformFeeRecipients(param0: i32): Marketplace__platformFeeRecipientsResult {
    let result = super.call(
      "platformFeeRecipients",
      "platformFeeRecipients(uint8):(address,uint8)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param0))]
    );

    return new Marketplace__platformFeeRecipientsResult(
      result[0].toAddress(),
      result[1].toI32()
    );
  }

  try_platformFeeRecipients(
    param0: i32
  ): ethereum.CallResult<Marketplace__platformFeeRecipientsResult> {
    let result = super.tryCall(
      "platformFeeRecipients",
      "platformFeeRecipients(uint8):(address,uint8)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param0))]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Marketplace__platformFeeRecipientsResult(
        value[0].toAddress(),
        value[1].toI32()
      )
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get feePercent(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get platformFeeInfo(): Array<ConstructorCallPlatformFeeInfoStruct> {
    return this._call.inputValues[1].value.toTupleArray<
      ConstructorCallPlatformFeeInfoStruct
    >();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCallPlatformFeeInfoStruct extends ethereum.Tuple {
  get platformFeeRecipient(): Address {
    return this[0].toAddress();
  }

  get feePercent(): i32 {
    return this[1].toI32();
  }
}

export class CancelListingCall extends ethereum.Call {
  get inputs(): CancelListingCall__Inputs {
    return new CancelListingCall__Inputs(this);
  }

  get outputs(): CancelListingCall__Outputs {
    return new CancelListingCall__Outputs(this);
  }
}

export class CancelListingCall__Inputs {
  _call: CancelListingCall;

  constructor(call: CancelListingCall) {
    this._call = call;
  }

  get _itemId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _nftAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class CancelListingCall__Outputs {
  _call: CancelListingCall;

  constructor(call: CancelListingCall) {
    this._call = call;
  }
}

export class CreateMarketSaleCall extends ethereum.Call {
  get inputs(): CreateMarketSaleCall__Inputs {
    return new CreateMarketSaleCall__Inputs(this);
  }

  get outputs(): CreateMarketSaleCall__Outputs {
    return new CreateMarketSaleCall__Outputs(this);
  }
}

export class CreateMarketSaleCall__Inputs {
  _call: CreateMarketSaleCall;

  constructor(call: CreateMarketSaleCall) {
    this._call = call;
  }

  get _itemId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _nftAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _owner(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class CreateMarketSaleCall__Outputs {
  _call: CreateMarketSaleCall;

  constructor(call: CreateMarketSaleCall) {
    this._call = call;
  }
}

export class ListCardItemForSaleCall extends ethereum.Call {
  get inputs(): ListCardItemForSaleCall__Inputs {
    return new ListCardItemForSaleCall__Inputs(this);
  }

  get outputs(): ListCardItemForSaleCall__Outputs {
    return new ListCardItemForSaleCall__Outputs(this);
  }
}

export class ListCardItemForSaleCall__Inputs {
  _call: ListCardItemForSaleCall;

  constructor(call: ListCardItemForSaleCall) {
    this._call = call;
  }

  get _nftAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _askingPrice(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _offerForSale(): boolean {
    return this._call.inputValues[3].value.toBoolean();
  }
}

export class ListCardItemForSaleCall__Outputs {
  _call: ListCardItemForSaleCall;

  constructor(call: ListCardItemForSaleCall) {
    this._call = call;
  }
}

export class ListItemCall extends ethereum.Call {
  get inputs(): ListItemCall__Inputs {
    return new ListItemCall__Inputs(this);
  }

  get outputs(): ListItemCall__Outputs {
    return new ListItemCall__Outputs(this);
  }
}

export class ListItemCall__Inputs {
  _call: ListItemCall;

  constructor(call: ListItemCall) {
    this._call = call;
  }

  get _nftAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _startingTime(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ListItemCall__Outputs {
  _call: ListItemCall;

  constructor(call: ListItemCall) {
    this._call = call;
  }
}

export class ListMultipleCardsCall extends ethereum.Call {
  get inputs(): ListMultipleCardsCall__Inputs {
    return new ListMultipleCardsCall__Inputs(this);
  }

  get outputs(): ListMultipleCardsCall__Outputs {
    return new ListMultipleCardsCall__Outputs(this);
  }
}

export class ListMultipleCardsCall__Inputs {
  _call: ListMultipleCardsCall;

  constructor(call: ListMultipleCardsCall) {
    this._call = call;
  }

  get _nftAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenIds(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class ListMultipleCardsCall__Outputs {
  _call: ListMultipleCardsCall;

  constructor(call: ListMultipleCardsCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateListingCall extends ethereum.Call {
  get inputs(): UpdateListingCall__Inputs {
    return new UpdateListingCall__Inputs(this);
  }

  get outputs(): UpdateListingCall__Outputs {
    return new UpdateListingCall__Outputs(this);
  }
}

export class UpdateListingCall__Inputs {
  _call: UpdateListingCall;

  constructor(call: UpdateListingCall) {
    this._call = call;
  }

  get _itemId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _nftAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _newAskingPrice(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _offerForSale(): boolean {
    return this._call.inputValues[4].value.toBoolean();
  }
}

export class UpdateListingCall__Outputs {
  _call: UpdateListingCall;

  constructor(call: UpdateListingCall) {
    this._call = call;
  }
}

export class UpdatePlatformFeeCall extends ethereum.Call {
  get inputs(): UpdatePlatformFeeCall__Inputs {
    return new UpdatePlatformFeeCall__Inputs(this);
  }

  get outputs(): UpdatePlatformFeeCall__Outputs {
    return new UpdatePlatformFeeCall__Outputs(this);
  }
}

export class UpdatePlatformFeeCall__Inputs {
  _call: UpdatePlatformFeeCall;

  constructor(call: UpdatePlatformFeeCall) {
    this._call = call;
  }

  get _platformFee(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class UpdatePlatformFeeCall__Outputs {
  _call: UpdatePlatformFeeCall;

  constructor(call: UpdatePlatformFeeCall) {
    this._call = call;
  }
}

export class UpdatePlatformFeeRecipientCall extends ethereum.Call {
  get inputs(): UpdatePlatformFeeRecipientCall__Inputs {
    return new UpdatePlatformFeeRecipientCall__Inputs(this);
  }

  get outputs(): UpdatePlatformFeeRecipientCall__Outputs {
    return new UpdatePlatformFeeRecipientCall__Outputs(this);
  }
}

export class UpdatePlatformFeeRecipientCall__Inputs {
  _call: UpdatePlatformFeeRecipientCall;

  constructor(call: UpdatePlatformFeeRecipientCall) {
    this._call = call;
  }

  get platformFeeInfo(): Array<
    UpdatePlatformFeeRecipientCallPlatformFeeInfoStruct
  > {
    return this._call.inputValues[0].value.toTupleArray<
      UpdatePlatformFeeRecipientCallPlatformFeeInfoStruct
    >();
  }
}

export class UpdatePlatformFeeRecipientCall__Outputs {
  _call: UpdatePlatformFeeRecipientCall;

  constructor(call: UpdatePlatformFeeRecipientCall) {
    this._call = call;
  }
}

export class UpdatePlatformFeeRecipientCallPlatformFeeInfoStruct extends ethereum.Tuple {
  get platformFeeRecipient(): Address {
    return this[0].toAddress();
  }

  get feePercent(): i32 {
    return this[1].toI32();
  }
}
