// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class MarketActivity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MarketActivity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type MarketActivity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("MarketActivity", id.toString(), this);
    }
  }

  static load(id: string): MarketActivity | null {
    return changetype<MarketActivity | null>(store.get("MarketActivity", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get initiator(): Bytes {
    let value = this.get("initiator");
    return value!.toBytes();
  }

  set initiator(value: Bytes) {
    this.set("initiator", Value.fromBytes(value));
  }

  get itemId(): BigInt | null {
    let value = this.get("itemId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set itemId(value: BigInt | null) {
    if (!value) {
      this.unset("itemId");
    } else {
      this.set("itemId", Value.fromBigInt(<BigInt>value));
    }
  }

  get marketEvent(): i32 {
    let value = this.get("marketEvent");
    return value!.toI32();
  }

  set marketEvent(value: i32) {
    this.set("marketEvent", Value.fromI32(value));
  }

  get item(): string | null {
    let value = this.get("item");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set item(value: string | null) {
    if (!value) {
      this.unset("item");
    } else {
      this.set("item", Value.fromString(<string>value));
    }
  }
}

export class MarketSale extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MarketSale entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type MarketSale must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("MarketSale", id.toString(), this);
    }
  }

  static load(id: string): MarketSale | null {
    return changetype<MarketSale | null>(store.get("MarketSale", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get initiator(): Bytes {
    let value = this.get("initiator");
    return value!.toBytes();
  }

  set initiator(value: Bytes) {
    this.set("initiator", Value.fromBytes(value));
  }

  get seller(): Bytes {
    let value = this.get("seller");
    return value!.toBytes();
  }

  set seller(value: Bytes) {
    this.set("seller", Value.fromBytes(value));
  }

  get itemId(): BigInt {
    let value = this.get("itemId");
    return value!.toBigInt();
  }

  set itemId(value: BigInt) {
    this.set("itemId", Value.fromBigInt(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get item(): string | null {
    let value = this.get("item");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set item(value: string | null) {
    if (!value) {
      this.unset("item");
    } else {
      this.set("item", Value.fromString(<string>value));
    }
  }
}

export class MarketItem extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MarketItem entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type MarketItem must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("MarketItem", id.toString(), this);
    }
  }

  static load(id: string): MarketItem | null {
    return changetype<MarketItem | null>(store.get("MarketItem", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get itemId(): BigInt | null {
    let value = this.get("itemId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set itemId(value: BigInt | null) {
    if (!value) {
      this.unset("itemId");
    } else {
      this.set("itemId", Value.fromBigInt(<BigInt>value));
    }
  }

  get nftContractAddress(): Bytes | null {
    let value = this.get("nftContractAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set nftContractAddress(value: Bytes | null) {
    if (!value) {
      this.unset("nftContractAddress");
    } else {
      this.set("nftContractAddress", Value.fromBytes(<Bytes>value));
    }
  }

  get tokenId(): BigInt | null {
    let value = this.get("tokenId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set tokenId(value: BigInt | null) {
    if (!value) {
      this.unset("tokenId");
    } else {
      this.set("tokenId", Value.fromBigInt(<BigInt>value));
    }
  }

  get card(): string | null {
    let value = this.get("card");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set card(value: string | null) {
    if (!value) {
      this.unset("card");
    } else {
      this.set("card", Value.fromString(<string>value));
    }
  }

  get seller(): Bytes | null {
    let value = this.get("seller");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set seller(value: Bytes | null) {
    if (!value) {
      this.unset("seller");
    } else {
      this.set("seller", Value.fromBytes(<Bytes>value));
    }
  }

  get owner(): Bytes | null {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set owner(value: Bytes | null) {
    if (!value) {
      this.unset("owner");
    } else {
      this.set("owner", Value.fromBytes(<Bytes>value));
    }
  }

  get price(): BigInt | null {
    let value = this.get("price");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set price(value: BigInt | null) {
    if (!value) {
      this.unset("price");
    } else {
      this.set("price", Value.fromBigInt(<BigInt>value));
    }
  }

  get forSale(): boolean {
    let value = this.get("forSale");
    return value!.toBoolean();
  }

  set forSale(value: boolean) {
    this.set("forSale", Value.fromBoolean(value));
  }

  get startingTime(): BigInt | null {
    let value = this.get("startingTime");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set startingTime(value: BigInt | null) {
    if (!value) {
      this.unset("startingTime");
    } else {
      this.set("startingTime", Value.fromBigInt(<BigInt>value));
    }
  }

  get isListed(): boolean {
    let value = this.get("isListed");
    return value!.toBoolean();
  }

  set isListed(value: boolean) {
    this.set("isListed", Value.fromBoolean(value));
  }

  get activities(): Array<string> | null {
    let value = this.get("activities");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set activities(value: Array<string> | null) {
    if (!value) {
      this.unset("activities");
    } else {
      this.set("activities", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class MarketplaceCommissionTransaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save MarketplaceCommissionTransaction entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type MarketplaceCommissionTransaction must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("MarketplaceCommissionTransaction", id.toString(), this);
    }
  }

  static load(id: string): MarketplaceCommissionTransaction | null {
    return changetype<MarketplaceCommissionTransaction | null>(
      store.get("MarketplaceCommissionTransaction", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get initiator(): Bytes {
    let value = this.get("initiator");
    return value!.toBytes();
  }

  set initiator(value: Bytes) {
    this.set("initiator", Value.fromBytes(value));
  }

  get itemId(): BigInt {
    let value = this.get("itemId");
    return value!.toBigInt();
  }

  set itemId(value: BigInt) {
    this.set("itemId", Value.fromBigInt(value));
  }

  get marketEvent(): i32 {
    let value = this.get("marketEvent");
    return value!.toI32();
  }

  set marketEvent(value: i32) {
    this.set("marketEvent", Value.fromI32(value));
  }

  get platformFee(): BigInt {
    let value = this.get("platformFee");
    return value!.toBigInt();
  }

  set platformFee(value: BigInt) {
    this.set("platformFee", Value.fromBigInt(value));
  }
}

export class OwnershipTransferred extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save OwnershipTransferred entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type OwnershipTransferred must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("OwnershipTransferred", id.toString(), this);
    }
  }

  static load(id: string): OwnershipTransferred | null {
    return changetype<OwnershipTransferred | null>(
      store.get("OwnershipTransferred", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get previousOwner(): Bytes {
    let value = this.get("previousOwner");
    return value!.toBytes();
  }

  set previousOwner(value: Bytes) {
    this.set("previousOwner", Value.fromBytes(value));
  }

  get newOwner(): Bytes {
    let value = this.get("newOwner");
    return value!.toBytes();
  }

  set newOwner(value: Bytes) {
    this.set("newOwner", Value.fromBytes(value));
  }
}

export class UpdatePlatformFee extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UpdatePlatformFee entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type UpdatePlatformFee must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("UpdatePlatformFee", id.toString(), this);
    }
  }

  static load(id: string): UpdatePlatformFee | null {
    return changetype<UpdatePlatformFee | null>(
      store.get("UpdatePlatformFee", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get platformFee(): i32 {
    let value = this.get("platformFee");
    return value!.toI32();
  }

  set platformFee(value: i32) {
    this.set("platformFee", Value.fromI32(value));
  }
}

export class UpdatePlatformFeeRecipient extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save UpdatePlatformFeeRecipient entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type UpdatePlatformFeeRecipient must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("UpdatePlatformFeeRecipient", id.toString(), this);
    }
  }

  static load(id: string): UpdatePlatformFeeRecipient | null {
    return changetype<UpdatePlatformFeeRecipient | null>(
      store.get("UpdatePlatformFeeRecipient", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get platformFeeRecipient1(): Bytes {
    let value = this.get("platformFeeRecipient1");
    return value!.toBytes();
  }

  set platformFeeRecipient1(value: Bytes) {
    this.set("platformFeeRecipient1", Value.fromBytes(value));
  }

  get platformFeeRecipient2(): Bytes {
    let value = this.get("platformFeeRecipient2");
    return value!.toBytes();
  }

  set platformFeeRecipient2(value: Bytes) {
    this.set("platformFeeRecipient2", Value.fromBytes(value));
  }
}

export class Approval extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Approval entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Approval must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Approval", id.toString(), this);
    }
  }

  static load(id: string): Approval | null {
    return changetype<Approval | null>(store.get("Approval", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value!.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get approved(): Bytes {
    let value = this.get("approved");
    return value!.toBytes();
  }

  set approved(value: Bytes) {
    this.set("approved", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }
}

export class ApprovalForAll extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ApprovalForAll entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ApprovalForAll must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ApprovalForAll", id.toString(), this);
    }
  }

  static load(id: string): ApprovalForAll | null {
    return changetype<ApprovalForAll | null>(store.get("ApprovalForAll", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value!.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get operator(): Bytes {
    let value = this.get("operator");
    return value!.toBytes();
  }

  set operator(value: Bytes) {
    this.set("operator", Value.fromBytes(value));
  }

  get approved(): boolean {
    let value = this.get("approved");
    return value!.toBoolean();
  }

  set approved(value: boolean) {
    this.set("approved", Value.fromBoolean(value));
  }
}

export class BurnTokenEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save BurnTokenEvent entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type BurnTokenEvent must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("BurnTokenEvent", id.toString(), this);
    }
  }

  static load(id: string): BurnTokenEvent | null {
    return changetype<BurnTokenEvent | null>(store.get("BurnTokenEvent", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get sender(): Bytes {
    let value = this.get("sender");
    return value!.toBytes();
  }

  set sender(value: Bytes) {
    this.set("sender", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }
}

export class MergeCardEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MergeCardEvent entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type MergeCardEvent must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("MergeCardEvent", id.toString(), this);
    }
  }

  static load(id: string): MergeCardEvent | null {
    return changetype<MergeCardEvent | null>(store.get("MergeCardEvent", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get burnedTokenId(): Array<BigInt> | null {
    let value = this.get("burnedTokenId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set burnedTokenId(value: Array<BigInt> | null) {
    if (!value) {
      this.unset("burnedTokenId");
    } else {
      this.set("burnedTokenId", Value.fromBigIntArray(<Array<BigInt>>value));
    }
  }
}

export class MintCardEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MintCardEvent entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type MintCardEvent must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("MintCardEvent", id.toString(), this);
    }
  }

  static load(id: string): MintCardEvent | null {
    return changetype<MintCardEvent | null>(store.get("MintCardEvent", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get sender(): Bytes {
    let value = this.get("sender");
    return value!.toBytes();
  }

  set sender(value: Bytes) {
    this.set("sender", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get typeOfCard(): i32 {
    let value = this.get("typeOfCard");
    return value!.toI32();
  }

  set typeOfCard(value: i32) {
    this.set("typeOfCard", Value.fromI32(value));
  }

  get base_uuid(): string {
    let value = this.get("base_uuid");
    return value!.toString();
  }

  set base_uuid(value: string) {
    this.set("base_uuid", Value.fromString(value));
  }

  get base_id(): string {
    let value = this.get("base_id");
    return value!.toString();
  }

  set base_id(value: string) {
    this.set("base_id", Value.fromString(value));
  }

  get base_baseId(): BigInt {
    let value = this.get("base_baseId");
    return value!.toBigInt();
  }

  set base_baseId(value: BigInt) {
    this.set("base_baseId", Value.fromBigInt(value));
  }

  get base_number(): BigInt {
    let value = this.get("base_number");
    return value!.toBigInt();
  }

  set base_number(value: BigInt) {
    this.set("base_number", Value.fromBigInt(value));
  }

  get base_cardType(): i32 {
    let value = this.get("base_cardType");
    return value!.toI32();
  }

  set base_cardType(value: i32) {
    this.set("base_cardType", Value.fromI32(value));
  }

  get base_category(): string {
    let value = this.get("base_category");
    return value!.toString();
  }

  set base_category(value: string) {
    this.set("base_category", Value.fromString(value));
  }

  get base_rarity(): i32 {
    let value = this.get("base_rarity");
    return value!.toI32();
  }

  set base_rarity(value: i32) {
    this.set("base_rarity", Value.fromI32(value));
  }

  get info_name(): string {
    let value = this.get("info_name");
    return value!.toString();
  }

  set info_name(value: string) {
    this.set("info_name", Value.fromString(value));
  }

  get info_description(): string {
    let value = this.get("info_description");
    return value!.toString();
  }

  set info_description(value: string) {
    this.set("info_description", Value.fromString(value));
  }

  get info_version(): BigInt {
    let value = this.get("info_version");
    return value!.toBigInt();
  }

  set info_version(value: BigInt) {
    this.set("info_version", Value.fromBigInt(value));
  }

  get info_illustrator(): string {
    let value = this.get("info_illustrator");
    return value!.toString();
  }

  set info_illustrator(value: string) {
    this.set("info_illustrator", Value.fromString(value));
  }

  get info_medias(): string {
    let value = this.get("info_medias");
    return value!.toString();
  }

  set info_medias(value: string) {
    this.set("info_medias", Value.fromString(value));
  }

  get info_animationUrl(): string {
    let value = this.get("info_animationUrl");
    return value!.toString();
  }

  set info_animationUrl(value: string) {
    this.set("info_animationUrl", Value.fromString(value));
  }

  get owner_uuid(): string {
    let value = this.get("owner_uuid");
    return value!.toString();
  }

  set owner_uuid(value: string) {
    this.set("owner_uuid", Value.fromString(value));
  }

  get owner_owner(): Bytes {
    let value = this.get("owner_owner");
    return value!.toBytes();
  }

  set owner_owner(value: Bytes) {
    this.set("owner_owner", Value.fromBytes(value));
  }

  get attr_alternative(): boolean {
    let value = this.get("attr_alternative");
    return value!.toBoolean();
  }

  set attr_alternative(value: boolean) {
    this.set("attr_alternative", Value.fromBoolean(value));
  }

  get attr_foil(): boolean {
    let value = this.get("attr_foil");
    return value!.toBoolean();
  }

  set attr_foil(value: boolean) {
    this.set("attr_foil", Value.fromBoolean(value));
  }

  get extra_element(): string {
    let value = this.get("extra_element");
    return value!.toString();
  }

  set extra_element(value: string) {
    this.set("extra_element", Value.fromString(value));
  }

  get extra_origin(): string {
    let value = this.get("extra_origin");
    return value!.toString();
  }

  set extra_origin(value: string) {
    this.set("extra_origin", Value.fromString(value));
  }

  get extra_faction(): string {
    let value = this.get("extra_faction");
    return value!.toString();
  }

  set extra_faction(value: string) {
    this.set("extra_faction", Value.fromString(value));
  }

  get extra_basePower(): BigInt {
    let value = this.get("extra_basePower");
    return value!.toBigInt();
  }

  set extra_basePower(value: BigInt) {
    this.set("extra_basePower", Value.fromBigInt(value));
  }

  get extra_potential(): i32 {
    let value = this.get("extra_potential");
    return value!.toI32();
  }

  set extra_potential(value: i32) {
    this.set("extra_potential", Value.fromI32(value));
  }

  get extra_rank(): i32 {
    let value = this.get("extra_rank");
    return value!.toI32();
  }

  set extra_rank(value: i32) {
    this.set("extra_rank", Value.fromI32(value));
  }

  get extra_alternativeCombo(): boolean {
    let value = this.get("extra_alternativeCombo");
    return value!.toBoolean();
  }

  set extra_alternativeCombo(value: boolean) {
    this.set("extra_alternativeCombo", Value.fromBoolean(value));
  }
}

export class MintedCompletedEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MintedCompletedEvent entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type MintedCompletedEvent must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("MintedCompletedEvent", id.toString(), this);
    }
  }

  static load(id: string): MintedCompletedEvent | null {
    return changetype<MintedCompletedEvent | null>(
      store.get("MintedCompletedEvent", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get caller(): Bytes {
    let value = this.get("caller");
    return value!.toBytes();
  }

  set caller(value: Bytes) {
    this.set("caller", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get message(): string {
    let value = this.get("message");
    return value!.toString();
  }

  set message(value: string) {
    this.set("message", Value.fromString(value));
  }
}

export class RegisterMarketPlaceEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save RegisterMarketPlaceEvent entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type RegisterMarketPlaceEvent must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("RegisterMarketPlaceEvent", id.toString(), this);
    }
  }

  static load(id: string): RegisterMarketPlaceEvent | null {
    return changetype<RegisterMarketPlaceEvent | null>(
      store.get("RegisterMarketPlaceEvent", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get marketPlaceApprover(): Bytes {
    let value = this.get("marketPlaceApprover");
    return value!.toBytes();
  }

  set marketPlaceApprover(value: Bytes) {
    this.set("marketPlaceApprover", Value.fromBytes(value));
  }

  get isApproved(): boolean {
    let value = this.get("isApproved");
    return value!.toBoolean();
  }

  set isApproved(value: boolean) {
    this.set("isApproved", Value.fromBoolean(value));
  }
}

export class Transfer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Transfer entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Transfer must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Transfer", id.toString(), this);
    }
  }

  static load(id: string): Transfer | null {
    return changetype<Transfer | null>(store.get("Transfer", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    return value!.toBytes();
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get to(): Bytes {
    let value = this.get("to");
    return value!.toBytes();
  }

  set to(value: Bytes) {
    this.set("to", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }
}

export class TransferNftEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TransferNftEvent entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TransferNftEvent must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("TransferNftEvent", id.toString(), this);
    }
  }

  static load(id: string): TransferNftEvent | null {
    return changetype<TransferNftEvent | null>(
      store.get("TransferNftEvent", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    return value!.toBytes();
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get to(): Bytes {
    let value = this.get("to");
    return value!.toBytes();
  }

  set to(value: Bytes) {
    this.set("to", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }
}

export class UpdateCardEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UpdateCardEvent entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type UpdateCardEvent must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("UpdateCardEvent", id.toString(), this);
    }
  }

  static load(id: string): UpdateCardEvent | null {
    return changetype<UpdateCardEvent | null>(store.get("UpdateCardEvent", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get typeOfCard(): i32 {
    let value = this.get("typeOfCard");
    return value!.toI32();
  }

  set typeOfCard(value: i32) {
    this.set("typeOfCard", Value.fromI32(value));
  }

  get base_uuid(): string {
    let value = this.get("base_uuid");
    return value!.toString();
  }

  set base_uuid(value: string) {
    this.set("base_uuid", Value.fromString(value));
  }

  get base_id(): string {
    let value = this.get("base_id");
    return value!.toString();
  }

  set base_id(value: string) {
    this.set("base_id", Value.fromString(value));
  }

  get base_baseId(): BigInt {
    let value = this.get("base_baseId");
    return value!.toBigInt();
  }

  set base_baseId(value: BigInt) {
    this.set("base_baseId", Value.fromBigInt(value));
  }

  get base_number(): BigInt {
    let value = this.get("base_number");
    return value!.toBigInt();
  }

  set base_number(value: BigInt) {
    this.set("base_number", Value.fromBigInt(value));
  }

  get base_cardType(): i32 {
    let value = this.get("base_cardType");
    return value!.toI32();
  }

  set base_cardType(value: i32) {
    this.set("base_cardType", Value.fromI32(value));
  }

  get base_category(): string {
    let value = this.get("base_category");
    return value!.toString();
  }

  set base_category(value: string) {
    this.set("base_category", Value.fromString(value));
  }

  get base_rarity(): i32 {
    let value = this.get("base_rarity");
    return value!.toI32();
  }

  set base_rarity(value: i32) {
    this.set("base_rarity", Value.fromI32(value));
  }

  get info_name(): string {
    let value = this.get("info_name");
    return value!.toString();
  }

  set info_name(value: string) {
    this.set("info_name", Value.fromString(value));
  }

  get info_description(): string {
    let value = this.get("info_description");
    return value!.toString();
  }

  set info_description(value: string) {
    this.set("info_description", Value.fromString(value));
  }

  get info_version(): BigInt {
    let value = this.get("info_version");
    return value!.toBigInt();
  }

  set info_version(value: BigInt) {
    this.set("info_version", Value.fromBigInt(value));
  }

  get info_illustrator(): string {
    let value = this.get("info_illustrator");
    return value!.toString();
  }

  set info_illustrator(value: string) {
    this.set("info_illustrator", Value.fromString(value));
  }

  get info_medias(): string {
    let value = this.get("info_medias");
    return value!.toString();
  }

  set info_medias(value: string) {
    this.set("info_medias", Value.fromString(value));
  }

  get info_animationUrl(): string {
    let value = this.get("info_animationUrl");
    return value!.toString();
  }

  set info_animationUrl(value: string) {
    this.set("info_animationUrl", Value.fromString(value));
  }

  get owner_uuid(): string {
    let value = this.get("owner_uuid");
    return value!.toString();
  }

  set owner_uuid(value: string) {
    this.set("owner_uuid", Value.fromString(value));
  }

  get owner_owner(): Bytes {
    let value = this.get("owner_owner");
    return value!.toBytes();
  }

  set owner_owner(value: Bytes) {
    this.set("owner_owner", Value.fromBytes(value));
  }

  get attr_alternative(): boolean {
    let value = this.get("attr_alternative");
    return value!.toBoolean();
  }

  set attr_alternative(value: boolean) {
    this.set("attr_alternative", Value.fromBoolean(value));
  }

  get attr_foil(): boolean {
    let value = this.get("attr_foil");
    return value!.toBoolean();
  }

  set attr_foil(value: boolean) {
    this.set("attr_foil", Value.fromBoolean(value));
  }

  get extra_element(): string {
    let value = this.get("extra_element");
    return value!.toString();
  }

  set extra_element(value: string) {
    this.set("extra_element", Value.fromString(value));
  }

  get extra_origin(): string {
    let value = this.get("extra_origin");
    return value!.toString();
  }

  set extra_origin(value: string) {
    this.set("extra_origin", Value.fromString(value));
  }

  get extra_faction(): string {
    let value = this.get("extra_faction");
    return value!.toString();
  }

  set extra_faction(value: string) {
    this.set("extra_faction", Value.fromString(value));
  }

  get extra_basePower(): BigInt {
    let value = this.get("extra_basePower");
    return value!.toBigInt();
  }

  set extra_basePower(value: BigInt) {
    this.set("extra_basePower", Value.fromBigInt(value));
  }

  get extra_potential(): i32 {
    let value = this.get("extra_potential");
    return value!.toI32();
  }

  set extra_potential(value: i32) {
    this.set("extra_potential", Value.fromI32(value));
  }

  get extra_rank(): i32 {
    let value = this.get("extra_rank");
    return value!.toI32();
  }

  set extra_rank(value: i32) {
    this.set("extra_rank", Value.fromI32(value));
  }

  get extra_alternativeCombo(): boolean {
    let value = this.get("extra_alternativeCombo");
    return value!.toBoolean();
  }

  set extra_alternativeCombo(value: boolean) {
    this.set("extra_alternativeCombo", Value.fromBoolean(value));
  }
}

export class Card extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Card entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Card must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Card", id.toString(), this);
    }
  }

  static load(id: string): Card | null {
    return changetype<Card | null>(store.get("Card", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get sender(): Bytes | null {
    let value = this.get("sender");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set sender(value: Bytes | null) {
    if (!value) {
      this.unset("sender");
    } else {
      this.set("sender", Value.fromBytes(<Bytes>value));
    }
  }

  get tokenId(): BigInt | null {
    let value = this.get("tokenId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set tokenId(value: BigInt | null) {
    if (!value) {
      this.unset("tokenId");
    } else {
      this.set("tokenId", Value.fromBigInt(<BigInt>value));
    }
  }

  get typeOfCard(): i32 {
    let value = this.get("typeOfCard");
    return value!.toI32();
  }

  set typeOfCard(value: i32) {
    this.set("typeOfCard", Value.fromI32(value));
  }

  get base_uuid(): string | null {
    let value = this.get("base_uuid");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set base_uuid(value: string | null) {
    if (!value) {
      this.unset("base_uuid");
    } else {
      this.set("base_uuid", Value.fromString(<string>value));
    }
  }

  get base_id(): string | null {
    let value = this.get("base_id");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set base_id(value: string | null) {
    if (!value) {
      this.unset("base_id");
    } else {
      this.set("base_id", Value.fromString(<string>value));
    }
  }

  get base_baseId(): BigInt | null {
    let value = this.get("base_baseId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set base_baseId(value: BigInt | null) {
    if (!value) {
      this.unset("base_baseId");
    } else {
      this.set("base_baseId", Value.fromBigInt(<BigInt>value));
    }
  }

  get base_number(): BigInt | null {
    let value = this.get("base_number");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set base_number(value: BigInt | null) {
    if (!value) {
      this.unset("base_number");
    } else {
      this.set("base_number", Value.fromBigInt(<BigInt>value));
    }
  }

  get base_cardType(): i32 {
    let value = this.get("base_cardType");
    return value!.toI32();
  }

  set base_cardType(value: i32) {
    this.set("base_cardType", Value.fromI32(value));
  }

  get base_category(): string | null {
    let value = this.get("base_category");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set base_category(value: string | null) {
    if (!value) {
      this.unset("base_category");
    } else {
      this.set("base_category", Value.fromString(<string>value));
    }
  }

  get base_rarity(): i32 {
    let value = this.get("base_rarity");
    return value!.toI32();
  }

  set base_rarity(value: i32) {
    this.set("base_rarity", Value.fromI32(value));
  }

  get info_name(): string | null {
    let value = this.get("info_name");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set info_name(value: string | null) {
    if (!value) {
      this.unset("info_name");
    } else {
      this.set("info_name", Value.fromString(<string>value));
    }
  }

  get info_description(): string | null {
    let value = this.get("info_description");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set info_description(value: string | null) {
    if (!value) {
      this.unset("info_description");
    } else {
      this.set("info_description", Value.fromString(<string>value));
    }
  }

  get info_version(): BigInt | null {
    let value = this.get("info_version");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set info_version(value: BigInt | null) {
    if (!value) {
      this.unset("info_version");
    } else {
      this.set("info_version", Value.fromBigInt(<BigInt>value));
    }
  }

  get info_illustrator(): string | null {
    let value = this.get("info_illustrator");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set info_illustrator(value: string | null) {
    if (!value) {
      this.unset("info_illustrator");
    } else {
      this.set("info_illustrator", Value.fromString(<string>value));
    }
  }

  get info_medias(): string | null {
    let value = this.get("info_medias");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set info_medias(value: string | null) {
    if (!value) {
      this.unset("info_medias");
    } else {
      this.set("info_medias", Value.fromString(<string>value));
    }
  }

  get info_animationUrl(): string | null {
    let value = this.get("info_animationUrl");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set info_animationUrl(value: string | null) {
    if (!value) {
      this.unset("info_animationUrl");
    } else {
      this.set("info_animationUrl", Value.fromString(<string>value));
    }
  }

  get owner_uuid(): string | null {
    let value = this.get("owner_uuid");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set owner_uuid(value: string | null) {
    if (!value) {
      this.unset("owner_uuid");
    } else {
      this.set("owner_uuid", Value.fromString(<string>value));
    }
  }

  get owner_owner(): Bytes | null {
    let value = this.get("owner_owner");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set owner_owner(value: Bytes | null) {
    if (!value) {
      this.unset("owner_owner");
    } else {
      this.set("owner_owner", Value.fromBytes(<Bytes>value));
    }
  }

  get attr_alternative(): boolean {
    let value = this.get("attr_alternative");
    return value!.toBoolean();
  }

  set attr_alternative(value: boolean) {
    this.set("attr_alternative", Value.fromBoolean(value));
  }

  get attr_foil(): boolean {
    let value = this.get("attr_foil");
    return value!.toBoolean();
  }

  set attr_foil(value: boolean) {
    this.set("attr_foil", Value.fromBoolean(value));
  }

  get extra_element(): string | null {
    let value = this.get("extra_element");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set extra_element(value: string | null) {
    if (!value) {
      this.unset("extra_element");
    } else {
      this.set("extra_element", Value.fromString(<string>value));
    }
  }

  get extra_origin(): string | null {
    let value = this.get("extra_origin");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set extra_origin(value: string | null) {
    if (!value) {
      this.unset("extra_origin");
    } else {
      this.set("extra_origin", Value.fromString(<string>value));
    }
  }

  get extra_faction(): string | null {
    let value = this.get("extra_faction");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set extra_faction(value: string | null) {
    if (!value) {
      this.unset("extra_faction");
    } else {
      this.set("extra_faction", Value.fromString(<string>value));
    }
  }

  get extra_basePower(): BigInt | null {
    let value = this.get("extra_basePower");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set extra_basePower(value: BigInt | null) {
    if (!value) {
      this.unset("extra_basePower");
    } else {
      this.set("extra_basePower", Value.fromBigInt(<BigInt>value));
    }
  }

  get extra_potential(): i32 {
    let value = this.get("extra_potential");
    return value!.toI32();
  }

  set extra_potential(value: i32) {
    this.set("extra_potential", Value.fromI32(value));
  }

  get extra_rank(): i32 {
    let value = this.get("extra_rank");
    return value!.toI32();
  }

  set extra_rank(value: i32) {
    this.set("extra_rank", Value.fromI32(value));
  }

  get extra_alternativeCombo(): boolean {
    let value = this.get("extra_alternativeCombo");
    return value!.toBoolean();
  }

  set extra_alternativeCombo(value: boolean) {
    this.set("extra_alternativeCombo", Value.fromBoolean(value));
  }
}
