// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class BurnTokenEvent extends ethereum.Event {
  get params(): BurnTokenEvent__Params {
    return new BurnTokenEvent__Params(this);
  }
}

export class BurnTokenEvent__Params {
  _event: BurnTokenEvent;

  constructor(event: BurnTokenEvent) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class MergeCardEvent extends ethereum.Event {
  get params(): MergeCardEvent__Params {
    return new MergeCardEvent__Params(this);
  }
}

export class MergeCardEvent__Params {
  _event: MergeCardEvent;

  constructor(event: MergeCardEvent) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get burnedTokenId(): Array<BigInt> {
    return this._event.parameters[1].value.toBigIntArray();
  }
}

export class MintCardEvent extends ethereum.Event {
  get params(): MintCardEvent__Params {
    return new MintCardEvent__Params(this);
  }
}

export class MintCardEvent__Params {
  _event: MintCardEvent;

  constructor(event: MintCardEvent) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get typeOfCard(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get base(): MintCardEventBaseStruct {
    return changetype<MintCardEventBaseStruct>(
      this._event.parameters[3].value.toTuple()
    );
  }

  get info(): MintCardEventInfoStruct {
    return changetype<MintCardEventInfoStruct>(
      this._event.parameters[4].value.toTuple()
    );
  }

  get owner(): MintCardEventOwnerStruct {
    return changetype<MintCardEventOwnerStruct>(
      this._event.parameters[5].value.toTuple()
    );
  }

  get attr(): MintCardEventAttrStruct {
    return changetype<MintCardEventAttrStruct>(
      this._event.parameters[6].value.toTuple()
    );
  }

  get extra(): MintCardEventExtraStruct {
    return changetype<MintCardEventExtraStruct>(
      this._event.parameters[7].value.toTuple()
    );
  }
}

export class MintCardEventBaseStruct extends ethereum.Tuple {
  get uuid(): string {
    return this[0].toString();
  }

  get id(): string {
    return this[1].toString();
  }

  get baseId(): BigInt {
    return this[2].toBigInt();
  }

  get number(): BigInt {
    return this[3].toBigInt();
  }

  get cardType(): i32 {
    return this[4].toI32();
  }

  get category(): string {
    return this[5].toString();
  }

  get rarity(): i32 {
    return this[6].toI32();
  }
}

export class MintCardEventInfoStruct extends ethereum.Tuple {
  get name(): string {
    return this[0].toString();
  }

  get description(): string {
    return this[1].toString();
  }

  get version(): BigInt {
    return this[2].toBigInt();
  }

  get illustrator(): string {
    return this[3].toString();
  }

  get medias(): string {
    return this[4].toString();
  }

  get animationUrl(): string {
    return this[5].toString();
  }
}

export class MintCardEventOwnerStruct extends ethereum.Tuple {
  get uuid(): string {
    return this[0].toString();
  }

  get owner(): Address {
    return this[1].toAddress();
  }
}

export class MintCardEventAttrStruct extends ethereum.Tuple {
  get alternative(): boolean {
    return this[0].toBoolean();
  }

  get foil(): boolean {
    return this[1].toBoolean();
  }
}

export class MintCardEventExtraStruct extends ethereum.Tuple {
  get element(): string {
    return this[0].toString();
  }

  get origin(): string {
    return this[1].toString();
  }

  get faction(): string {
    return this[2].toString();
  }

  get basePower(): BigInt {
    return this[3].toBigInt();
  }

  get potential(): i32 {
    return this[4].toI32();
  }

  get rank(): i32 {
    return this[5].toI32();
  }

  get alternativeCombo(): boolean {
    return this[6].toBoolean();
  }
}

export class MintedCompletedEvent extends ethereum.Event {
  get params(): MintedCompletedEvent__Params {
    return new MintedCompletedEvent__Params(this);
  }
}

export class MintedCompletedEvent__Params {
  _event: MintedCompletedEvent;

  constructor(event: MintedCompletedEvent) {
    this._event = event;
  }

  get caller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get message(): string {
    return this._event.parameters[2].value.toString();
  }
}

export class RegisterMarketPlaceEvent extends ethereum.Event {
  get params(): RegisterMarketPlaceEvent__Params {
    return new RegisterMarketPlaceEvent__Params(this);
  }
}

export class RegisterMarketPlaceEvent__Params {
  _event: RegisterMarketPlaceEvent;

  constructor(event: RegisterMarketPlaceEvent) {
    this._event = event;
  }

  get marketPlaceApprover(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get isApproved(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class TransferNftEvent extends ethereum.Event {
  get params(): TransferNftEvent__Params {
    return new TransferNftEvent__Params(this);
  }
}

export class TransferNftEvent__Params {
  _event: TransferNftEvent;

  constructor(event: TransferNftEvent) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class UpdateCardEvent extends ethereum.Event {
  get params(): UpdateCardEvent__Params {
    return new UpdateCardEvent__Params(this);
  }
}

export class UpdateCardEvent__Params {
  _event: UpdateCardEvent;

  constructor(event: UpdateCardEvent) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get typeOfCard(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get base(): UpdateCardEventBaseStruct {
    return changetype<UpdateCardEventBaseStruct>(
      this._event.parameters[2].value.toTuple()
    );
  }

  get info(): UpdateCardEventInfoStruct {
    return changetype<UpdateCardEventInfoStruct>(
      this._event.parameters[3].value.toTuple()
    );
  }

  get owner(): UpdateCardEventOwnerStruct {
    return changetype<UpdateCardEventOwnerStruct>(
      this._event.parameters[4].value.toTuple()
    );
  }

  get attr(): UpdateCardEventAttrStruct {
    return changetype<UpdateCardEventAttrStruct>(
      this._event.parameters[5].value.toTuple()
    );
  }

  get extra(): UpdateCardEventExtraStruct {
    return changetype<UpdateCardEventExtraStruct>(
      this._event.parameters[6].value.toTuple()
    );
  }
}

export class UpdateCardEventBaseStruct extends ethereum.Tuple {
  get uuid(): string {
    return this[0].toString();
  }

  get id(): string {
    return this[1].toString();
  }

  get baseId(): BigInt {
    return this[2].toBigInt();
  }

  get number(): BigInt {
    return this[3].toBigInt();
  }

  get cardType(): i32 {
    return this[4].toI32();
  }

  get category(): string {
    return this[5].toString();
  }

  get rarity(): i32 {
    return this[6].toI32();
  }
}

export class UpdateCardEventInfoStruct extends ethereum.Tuple {
  get name(): string {
    return this[0].toString();
  }

  get description(): string {
    return this[1].toString();
  }

  get version(): BigInt {
    return this[2].toBigInt();
  }

  get illustrator(): string {
    return this[3].toString();
  }

  get medias(): string {
    return this[4].toString();
  }

  get animationUrl(): string {
    return this[5].toString();
  }
}

export class UpdateCardEventOwnerStruct extends ethereum.Tuple {
  get uuid(): string {
    return this[0].toString();
  }

  get owner(): Address {
    return this[1].toAddress();
  }
}

export class UpdateCardEventAttrStruct extends ethereum.Tuple {
  get alternative(): boolean {
    return this[0].toBoolean();
  }

  get foil(): boolean {
    return this[1].toBoolean();
  }
}

export class UpdateCardEventExtraStruct extends ethereum.Tuple {
  get element(): string {
    return this[0].toString();
  }

  get origin(): string {
    return this[1].toString();
  }

  get faction(): string {
    return this[2].toString();
  }

  get basePower(): BigInt {
    return this[3].toBigInt();
  }

  get potential(): i32 {
    return this[4].toI32();
  }

  get rank(): i32 {
    return this[5].toI32();
  }

  get alternativeCombo(): boolean {
    return this[6].toBoolean();
  }
}

export class CTANFT__CARDSResult {
  value0: string;
  value1: string;
  value2: BigInt;
  value3: BigInt;
  value4: i32;
  value5: string;
  value6: i32;

  constructor(
    value0: string,
    value1: string,
    value2: BigInt,
    value3: BigInt,
    value4: i32,
    value5: string,
    value6: i32
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromString(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set(
      "value4",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value4))
    );
    map.set("value5", ethereum.Value.fromString(this.value5));
    map.set(
      "value6",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value6))
    );
    return map;
  }

  getUuid(): string {
    return this.value0;
  }

  getId(): string {
    return this.value1;
  }

  getBaseId(): BigInt {
    return this.value2;
  }

  getNumber(): BigInt {
    return this.value3;
  }

  getCardType(): i32 {
    return this.value4;
  }

  getCategory(): string {
    return this.value5;
  }

  getRarity(): i32 {
    return this.value6;
  }
}

export class CTANFT__battleCardResultBaseStruct extends ethereum.Tuple {
  get uuid(): string {
    return this[0].toString();
  }

  get id(): string {
    return this[1].toString();
  }

  get baseId(): BigInt {
    return this[2].toBigInt();
  }

  get number(): BigInt {
    return this[3].toBigInt();
  }

  get cardType(): i32 {
    return this[4].toI32();
  }

  get category(): string {
    return this[5].toString();
  }

  get rarity(): i32 {
    return this[6].toI32();
  }
}

export class CTANFT__battleCardResultInfoStruct extends ethereum.Tuple {
  get name(): string {
    return this[0].toString();
  }

  get description(): string {
    return this[1].toString();
  }

  get version(): BigInt {
    return this[2].toBigInt();
  }

  get illustrator(): string {
    return this[3].toString();
  }

  get medias(): string {
    return this[4].toString();
  }

  get animationUrl(): string {
    return this[5].toString();
  }
}

export class CTANFT__battleCardResultOwnerStruct extends ethereum.Tuple {
  get uuid(): string {
    return this[0].toString();
  }

  get owner(): Address {
    return this[1].toAddress();
  }
}

export class CTANFT__battleCardResultAttrStruct extends ethereum.Tuple {
  get alternative(): boolean {
    return this[0].toBoolean();
  }

  get foil(): boolean {
    return this[1].toBoolean();
  }
}

export class CTANFT__battleCardResultExtraStruct extends ethereum.Tuple {
  get element(): string {
    return this[0].toString();
  }

  get origin(): string {
    return this[1].toString();
  }

  get faction(): string {
    return this[2].toString();
  }

  get basePower(): BigInt {
    return this[3].toBigInt();
  }

  get potential(): i32 {
    return this[4].toI32();
  }

  get rank(): i32 {
    return this[5].toI32();
  }

  get alternativeCombo(): boolean {
    return this[6].toBoolean();
  }
}

export class CTANFT__battleCardResult {
  value0: CTANFT__battleCardResultBaseStruct;
  value1: CTANFT__battleCardResultInfoStruct;
  value2: CTANFT__battleCardResultOwnerStruct;
  value3: CTANFT__battleCardResultAttrStruct;
  value4: CTANFT__battleCardResultExtraStruct;

  constructor(
    value0: CTANFT__battleCardResultBaseStruct,
    value1: CTANFT__battleCardResultInfoStruct,
    value2: CTANFT__battleCardResultOwnerStruct,
    value3: CTANFT__battleCardResultAttrStruct,
    value4: CTANFT__battleCardResultExtraStruct
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromTuple(this.value0));
    map.set("value1", ethereum.Value.fromTuple(this.value1));
    map.set("value2", ethereum.Value.fromTuple(this.value2));
    map.set("value3", ethereum.Value.fromTuple(this.value3));
    map.set("value4", ethereum.Value.fromTuple(this.value4));
    return map;
  }

  getBase(): CTANFT__battleCardResultBaseStruct {
    return this.value0;
  }

  getInfo(): CTANFT__battleCardResultInfoStruct {
    return this.value1;
  }

  getOwner(): CTANFT__battleCardResultOwnerStruct {
    return this.value2;
  }

  getAttr(): CTANFT__battleCardResultAttrStruct {
    return this.value3;
  }

  getExtra(): CTANFT__battleCardResultExtraStruct {
    return this.value4;
  }
}

export class CTANFT__normalCardResultBaseStruct extends ethereum.Tuple {
  get uuid(): string {
    return this[0].toString();
  }

  get id(): string {
    return this[1].toString();
  }

  get baseId(): BigInt {
    return this[2].toBigInt();
  }

  get number(): BigInt {
    return this[3].toBigInt();
  }

  get cardType(): i32 {
    return this[4].toI32();
  }

  get category(): string {
    return this[5].toString();
  }

  get rarity(): i32 {
    return this[6].toI32();
  }
}

export class CTANFT__normalCardResultInfoStruct extends ethereum.Tuple {
  get name(): string {
    return this[0].toString();
  }

  get description(): string {
    return this[1].toString();
  }

  get version(): BigInt {
    return this[2].toBigInt();
  }

  get illustrator(): string {
    return this[3].toString();
  }

  get medias(): string {
    return this[4].toString();
  }

  get animationUrl(): string {
    return this[5].toString();
  }
}

export class CTANFT__normalCardResultOwnerStruct extends ethereum.Tuple {
  get uuid(): string {
    return this[0].toString();
  }

  get owner(): Address {
    return this[1].toAddress();
  }
}

export class CTANFT__normalCardResultAttrStruct extends ethereum.Tuple {
  get alternative(): boolean {
    return this[0].toBoolean();
  }

  get foil(): boolean {
    return this[1].toBoolean();
  }
}

export class CTANFT__normalCardResult {
  value0: CTANFT__normalCardResultBaseStruct;
  value1: CTANFT__normalCardResultInfoStruct;
  value2: CTANFT__normalCardResultOwnerStruct;
  value3: CTANFT__normalCardResultAttrStruct;

  constructor(
    value0: CTANFT__normalCardResultBaseStruct,
    value1: CTANFT__normalCardResultInfoStruct,
    value2: CTANFT__normalCardResultOwnerStruct,
    value3: CTANFT__normalCardResultAttrStruct
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromTuple(this.value0));
    map.set("value1", ethereum.Value.fromTuple(this.value1));
    map.set("value2", ethereum.Value.fromTuple(this.value2));
    map.set("value3", ethereum.Value.fromTuple(this.value3));
    return map;
  }

  getBase(): CTANFT__normalCardResultBaseStruct {
    return this.value0;
  }

  getInfo(): CTANFT__normalCardResultInfoStruct {
    return this.value1;
  }

  getOwner(): CTANFT__normalCardResultOwnerStruct {
    return this.value2;
  }

  getAttr(): CTANFT__normalCardResultAttrStruct {
    return this.value3;
  }
}

export class CTANFT extends ethereum.SmartContract {
  static bind(address: Address): CTANFT {
    return new CTANFT("CTANFT", address);
  }

  CARDS(param0: BigInt): CTANFT__CARDSResult {
    let result = super.call(
      "CARDS",
      "CARDS(uint256):(string,string,uint32,uint32,uint8,string,uint8)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new CTANFT__CARDSResult(
      result[0].toString(),
      result[1].toString(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toI32(),
      result[5].toString(),
      result[6].toI32()
    );
  }

  try_CARDS(param0: BigInt): ethereum.CallResult<CTANFT__CARDSResult> {
    let result = super.tryCall(
      "CARDS",
      "CARDS(uint256):(string,string,uint32,uint32,uint8,string,uint8)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new CTANFT__CARDSResult(
        value[0].toString(),
        value[1].toString(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toI32(),
        value[5].toString(),
        value[6].toI32()
      )
    );
  }

  COMMON(param0: BigInt): BigInt {
    let result = super.call("COMMON", "COMMON(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_COMMON(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("COMMON", "COMMON(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  GetLastMintedTokenId(): BigInt {
    let result = super.call(
      "GetLastMintedTokenId",
      "GetLastMintedTokenId():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_GetLastMintedTokenId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "GetLastMintedTokenId",
      "GetLastMintedTokenId():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MYTHIC(param0: BigInt): BigInt {
    let result = super.call("MYTHIC", "MYTHIC(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_MYTHIC(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("MYTHIC", "MYTHIC(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  RARE(param0: BigInt): BigInt {
    let result = super.call("RARE", "RARE(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_RARE(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("RARE", "RARE(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  ULTRA_RARE(param0: BigInt): BigInt {
    let result = super.call("ULTRA_RARE", "ULTRA_RARE(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_ULTRA_RARE(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("ULTRA_RARE", "ULTRA_RARE(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  UNCOMMON(param0: BigInt): BigInt {
    let result = super.call("UNCOMMON", "UNCOMMON(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_UNCOMMON(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("UNCOMMON", "UNCOMMON(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  battleCard(param0: BigInt): CTANFT__battleCardResult {
    let result = super.call(
      "battleCard",
      "battleCard(uint256):((string,string,uint32,uint32,uint8,string,uint8),(string,string,uint32,string,string,string),(string,address),(bool,bool),(string,string,string,uint32,uint8,uint8,bool))",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return changetype<CTANFT__battleCardResult>(
      new CTANFT__battleCardResult(
        changetype<CTANFT__battleCardResultBaseStruct>(result[0].toTuple()),
        changetype<CTANFT__battleCardResultInfoStruct>(result[1].toTuple()),
        changetype<CTANFT__battleCardResultOwnerStruct>(result[2].toTuple()),
        changetype<CTANFT__battleCardResultAttrStruct>(result[3].toTuple()),
        changetype<CTANFT__battleCardResultExtraStruct>(result[4].toTuple())
      )
    );
  }

  try_battleCard(
    param0: BigInt
  ): ethereum.CallResult<CTANFT__battleCardResult> {
    let result = super.tryCall(
      "battleCard",
      "battleCard(uint256):((string,string,uint32,uint32,uint8,string,uint8),(string,string,uint32,string,string,string),(string,address),(bool,bool),(string,string,string,uint32,uint8,uint8,bool))",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<CTANFT__battleCardResult>(
        new CTANFT__battleCardResult(
          changetype<CTANFT__battleCardResultBaseStruct>(value[0].toTuple()),
          changetype<CTANFT__battleCardResultInfoStruct>(value[1].toTuple()),
          changetype<CTANFT__battleCardResultOwnerStruct>(value[2].toTuple()),
          changetype<CTANFT__battleCardResultAttrStruct>(value[3].toTuple()),
          changetype<CTANFT__battleCardResultExtraStruct>(value[4].toTuple())
        )
      )
    );
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lastMintedTokenId(): BigInt {
    let result = super.call(
      "lastMintedTokenId",
      "lastMintedTokenId():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_lastMintedTokenId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastMintedTokenId",
      "lastMintedTokenId():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  normalCard(param0: BigInt): CTANFT__normalCardResult {
    let result = super.call(
      "normalCard",
      "normalCard(uint256):((string,string,uint32,uint32,uint8,string,uint8),(string,string,uint32,string,string,string),(string,address),(bool,bool))",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return changetype<CTANFT__normalCardResult>(
      new CTANFT__normalCardResult(
        changetype<CTANFT__normalCardResultBaseStruct>(result[0].toTuple()),
        changetype<CTANFT__normalCardResultInfoStruct>(result[1].toTuple()),
        changetype<CTANFT__normalCardResultOwnerStruct>(result[2].toTuple()),
        changetype<CTANFT__normalCardResultAttrStruct>(result[3].toTuple())
      )
    );
  }

  try_normalCard(
    param0: BigInt
  ): ethereum.CallResult<CTANFT__normalCardResult> {
    let result = super.tryCall(
      "normalCard",
      "normalCard(uint256):((string,string,uint32,uint32,uint8,string,uint8),(string,string,uint32,string,string,string),(string,address),(bool,bool))",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<CTANFT__normalCardResult>(
        new CTANFT__normalCardResult(
          changetype<CTANFT__normalCardResultBaseStruct>(value[0].toTuple()),
          changetype<CTANFT__normalCardResultInfoStruct>(value[1].toTuple()),
          changetype<CTANFT__normalCardResultOwnerStruct>(value[2].toTuple()),
          changetype<CTANFT__normalCardResultAttrStruct>(value[3].toTuple())
        )
      )
    );
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DefaultCall extends ethereum.Call {
  get inputs(): DefaultCall__Inputs {
    return new DefaultCall__Inputs(this);
  }

  get outputs(): DefaultCall__Outputs {
    return new DefaultCall__Outputs(this);
  }
}

export class DefaultCall__Inputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class DefaultCall__Outputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class TransferNftCall extends ethereum.Call {
  get inputs(): TransferNftCall__Inputs {
    return new TransferNftCall__Inputs(this);
  }

  get outputs(): TransferNftCall__Outputs {
    return new TransferNftCall__Outputs(this);
  }
}

export class TransferNftCall__Inputs {
  _call: TransferNftCall;

  constructor(call: TransferNftCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferNftCall__Outputs {
  _call: TransferNftCall;

  constructor(call: TransferNftCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class BurnTokenCall extends ethereum.Call {
  get inputs(): BurnTokenCall__Inputs {
    return new BurnTokenCall__Inputs(this);
  }

  get outputs(): BurnTokenCall__Outputs {
    return new BurnTokenCall__Outputs(this);
  }
}

export class BurnTokenCall__Inputs {
  _call: BurnTokenCall;

  constructor(call: BurnTokenCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BurnTokenCall__Outputs {
  _call: BurnTokenCall;

  constructor(call: BurnTokenCall) {
    this._call = call;
  }
}

export class MintCardCall extends ethereum.Call {
  get inputs(): MintCardCall__Inputs {
    return new MintCardCall__Inputs(this);
  }

  get outputs(): MintCardCall__Outputs {
    return new MintCardCall__Outputs(this);
  }
}

export class MintCardCall__Inputs {
  _call: MintCardCall;

  constructor(call: MintCardCall) {
    this._call = call;
  }

  get typeOfCard(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get base(): MintCardCallBaseStruct {
    return changetype<MintCardCallBaseStruct>(
      this._call.inputValues[1].value.toTuple()
    );
  }

  get info(): MintCardCallInfoStruct {
    return changetype<MintCardCallInfoStruct>(
      this._call.inputValues[2].value.toTuple()
    );
  }

  get owner(): MintCardCallOwnerStruct {
    return changetype<MintCardCallOwnerStruct>(
      this._call.inputValues[3].value.toTuple()
    );
  }

  get attr(): MintCardCallAttrStruct {
    return changetype<MintCardCallAttrStruct>(
      this._call.inputValues[4].value.toTuple()
    );
  }

  get extra(): MintCardCallExtraStruct {
    return changetype<MintCardCallExtraStruct>(
      this._call.inputValues[5].value.toTuple()
    );
  }
}

export class MintCardCall__Outputs {
  _call: MintCardCall;

  constructor(call: MintCardCall) {
    this._call = call;
  }
}

export class MintCardCallBaseStruct extends ethereum.Tuple {
  get uuid(): string {
    return this[0].toString();
  }

  get id(): string {
    return this[1].toString();
  }

  get baseId(): BigInt {
    return this[2].toBigInt();
  }

  get number(): BigInt {
    return this[3].toBigInt();
  }

  get cardType(): i32 {
    return this[4].toI32();
  }

  get category(): string {
    return this[5].toString();
  }

  get rarity(): i32 {
    return this[6].toI32();
  }
}

export class MintCardCallInfoStruct extends ethereum.Tuple {
  get name(): string {
    return this[0].toString();
  }

  get description(): string {
    return this[1].toString();
  }

  get version(): BigInt {
    return this[2].toBigInt();
  }

  get illustrator(): string {
    return this[3].toString();
  }

  get medias(): string {
    return this[4].toString();
  }

  get animationUrl(): string {
    return this[5].toString();
  }
}

export class MintCardCallOwnerStruct extends ethereum.Tuple {
  get uuid(): string {
    return this[0].toString();
  }

  get owner(): Address {
    return this[1].toAddress();
  }
}

export class MintCardCallAttrStruct extends ethereum.Tuple {
  get alternative(): boolean {
    return this[0].toBoolean();
  }

  get foil(): boolean {
    return this[1].toBoolean();
  }
}

export class MintCardCallExtraStruct extends ethereum.Tuple {
  get element(): string {
    return this[0].toString();
  }

  get origin(): string {
    return this[1].toString();
  }

  get faction(): string {
    return this[2].toString();
  }

  get basePower(): BigInt {
    return this[3].toBigInt();
  }

  get potential(): i32 {
    return this[4].toI32();
  }

  get rank(): i32 {
    return this[5].toI32();
  }

  get alternativeCombo(): boolean {
    return this[6].toBoolean();
  }
}

export class RegisterMarketPlaceCall extends ethereum.Call {
  get inputs(): RegisterMarketPlaceCall__Inputs {
    return new RegisterMarketPlaceCall__Inputs(this);
  }

  get outputs(): RegisterMarketPlaceCall__Outputs {
    return new RegisterMarketPlaceCall__Outputs(this);
  }
}

export class RegisterMarketPlaceCall__Inputs {
  _call: RegisterMarketPlaceCall;

  constructor(call: RegisterMarketPlaceCall) {
    this._call = call;
  }

  get marketPlace(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RegisterMarketPlaceCall__Outputs {
  _call: RegisterMarketPlaceCall;

  constructor(call: RegisterMarketPlaceCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class UpdateCardCall extends ethereum.Call {
  get inputs(): UpdateCardCall__Inputs {
    return new UpdateCardCall__Inputs(this);
  }

  get outputs(): UpdateCardCall__Outputs {
    return new UpdateCardCall__Outputs(this);
  }
}

export class UpdateCardCall__Inputs {
  _call: UpdateCardCall;

  constructor(call: UpdateCardCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get base(): UpdateCardCallBaseStruct {
    return changetype<UpdateCardCallBaseStruct>(
      this._call.inputValues[1].value.toTuple()
    );
  }

  get info(): UpdateCardCallInfoStruct {
    return changetype<UpdateCardCallInfoStruct>(
      this._call.inputValues[2].value.toTuple()
    );
  }

  get owner(): UpdateCardCallOwnerStruct {
    return changetype<UpdateCardCallOwnerStruct>(
      this._call.inputValues[3].value.toTuple()
    );
  }

  get attr(): UpdateCardCallAttrStruct {
    return changetype<UpdateCardCallAttrStruct>(
      this._call.inputValues[4].value.toTuple()
    );
  }

  get extra(): UpdateCardCallExtraStruct {
    return changetype<UpdateCardCallExtraStruct>(
      this._call.inputValues[5].value.toTuple()
    );
  }
}

export class UpdateCardCall__Outputs {
  _call: UpdateCardCall;

  constructor(call: UpdateCardCall) {
    this._call = call;
  }
}

export class UpdateCardCallBaseStruct extends ethereum.Tuple {
  get uuid(): string {
    return this[0].toString();
  }

  get id(): string {
    return this[1].toString();
  }

  get baseId(): BigInt {
    return this[2].toBigInt();
  }

  get number(): BigInt {
    return this[3].toBigInt();
  }

  get cardType(): i32 {
    return this[4].toI32();
  }

  get category(): string {
    return this[5].toString();
  }

  get rarity(): i32 {
    return this[6].toI32();
  }
}

export class UpdateCardCallInfoStruct extends ethereum.Tuple {
  get name(): string {
    return this[0].toString();
  }

  get description(): string {
    return this[1].toString();
  }

  get version(): BigInt {
    return this[2].toBigInt();
  }

  get illustrator(): string {
    return this[3].toString();
  }

  get medias(): string {
    return this[4].toString();
  }

  get animationUrl(): string {
    return this[5].toString();
  }
}

export class UpdateCardCallOwnerStruct extends ethereum.Tuple {
  get uuid(): string {
    return this[0].toString();
  }

  get owner(): Address {
    return this[1].toAddress();
  }
}

export class UpdateCardCallAttrStruct extends ethereum.Tuple {
  get alternative(): boolean {
    return this[0].toBoolean();
  }

  get foil(): boolean {
    return this[1].toBoolean();
  }
}

export class UpdateCardCallExtraStruct extends ethereum.Tuple {
  get element(): string {
    return this[0].toString();
  }

  get origin(): string {
    return this[1].toString();
  }

  get faction(): string {
    return this[2].toString();
  }

  get basePower(): BigInt {
    return this[3].toBigInt();
  }

  get potential(): i32 {
    return this[4].toI32();
  }

  get rank(): i32 {
    return this[5].toI32();
  }

  get alternativeCombo(): boolean {
    return this[6].toBoolean();
  }
}
